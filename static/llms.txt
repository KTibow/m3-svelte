# M3 Svelte

This is M3 Svelte, a Svelte component library that implements the Material 3 design system by @KTibow.

## Getting started

The first step is installation:
```bash
npm i m3-svelte
```

M3 Svelte needs two things to work: a theme and a font. The simplest setup looks like this:
```html (your template)
<head>
  [...]
  <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Roboto:wght@400;500;700&display=swap">
</head>
<body class="m3-font-body-large">
  [...]
</body>
```

```css (somewhere always loaded)
:root {
  /* Any custom styles should go here */
}
```

```svelte (somewhere always loaded)
<script>
  import { StyleFromScheme } from "m3-svelte";
</script>

[snippet that you've copied from https://ktibow.github.io/m3-svelte/theme]
```

Aim to keep configuration and boilerplate out of Svelte. The only configuration that should be in Svelte is the StyleFromScheme snippet.

## Building blocks

M3 Svelte is built on a few core concepts:

### CSS Custom Properties: The foundation of theming
```css
--m3-scheme-[color]: [R G B];            /* Color tokens */
--m3-util-elevation-[0-5]: [box shadow]; /* Elevation levels */
--m3-util-rounding-[size]: [size];       /* Border radius sizes */
/*
Colors:
primary, on-primary, primary-container, on-primary-container, inverse-primary, secondary, on-secondary, secondary-container, on-secondary-container, tertiary, on-tertiary, tertiary-container, on-tertiary-container, error, on-error, error-container, on-error-container, background, on-background, surface, on-surface, surface-variant, on-surface-variant, inverse-surface, inverse-on-surface, outline, outline-variant, shadow, scrim, surface-dim, surface-bright, surface-container-lowest, surface-container-low, surface-container, surface-container-high, surface-container-highest, surface-tint
Rounding sizes:
none, extra-small, small, medium, large, extra-large, full
/*
```

### Utility Classes: Common Material styles with the `m3-` prefix
```svelte
<h1 class="m3-font-display-large">Large Title</h1>
<p class="m3-font-body-large">Regular text</p>
<!--
Scale: display, headline, title, body, label
Sizes: large, medium, small
-->
```

### Components: Ready-to-use Material elements
```svelte
<script>
  import { Button } from "m3-svelte";
</script>
<Button type="filled">Hello</Button>
```

## Tips

M3 Svelte is more and less than the typical component framework.

On one hand, Material 3 consists of guidelines across color, shadow, easing, animation, and spacing, and M3 Svelte is all of that. You don't have to make your own components or animations - you could use components like `Card` and animate them with the `sharedAxisTransition`, eased with `easeEmphasized`.

On the other hand, M3 Svelte doesn't give you a template. There are many things you have to do yourself, like:
- Generating and pasting your theme
- Including your font
- Resetting CSS
- Setting up your own layout (ideally a responsive one)
- Styling your components (if you need something M3 doesn't have)
- Slotting in <input>s
- Rendering icons

If you're ever unsure about something, you might want to check the [m3-svelte repo](https://github.com/KTibow/m3-svelte). The M3 Svelte demo website is built with M3 Svelte and might have implemented what you're trying to do.

## Troubleshooting

You should avoid trying to restyle components. You can't set a `class` and due to Svelte scoped styles, even if you could, it wouldn't work. I repeat, you CANNOT set a `class` on M3 Svelte components. Always look for alternatives, like using `gap` instead of `margin`. If you *must* do this, you would have to do something like `.my-container > :global(.m3-container)`.

You must wrap Checkbox, Radio, and Switch in <label>s.

M3 Svelte uses the Iconify ecosystem. M3 Svelte imports icons from NPM and renders them as SVG. Some components render icons for you:
```svelte
<script>
  import { FAB } from "m3-svelte";
  import iconPlus from "@ktibow/iconset-material-symbols/add";
</script>

<FAB icon={iconPlus} />
```

While in other cases, you render them yourselves:
```svelte
<script>
  import { ListItem, Icon } from "m3-svelte";
  import iconPlus from "@ktibow/iconset-material-symbols/add";
</script>

<ListItem headline="User">
  <Icon icon={iconPlus} slot="leading" />
</ListItem>
```

## Examples

Here's an example todo list component:
```svelte
<script>
  import { TextField, Button, ListItem, Icon, Checkbox } from "$lib";
  import iconPlus from "@ktibow/iconset-material-symbols/add";
  import iconDelete from "@ktibow/iconset-material-symbols/delete";

  let tasks = [
    { id: 1, text: "Learn M3 Svelte", completed: false },
    { id: 2, text: "Build a prototype", completed: false },
    { id: 3, text: "Test components", completed: true },
  ];

  let newTaskText = "";

  function addTask() {
    newTaskText = newTaskText.trim();
    if (!newTaskText) return;

    tasks = [
      ...tasks,
      {
        id: Math.max(...tasks.map((t) => t.id)) + 1,
        text: newTaskText,
        completed: false,
      },
    ];
    newTaskText = "";
  }
</script>

<div class="tasks">
  {#each tasks as task (task.id)}
    <ListItem headline={task.text}>
      <label class="box-wrapper" slot="leading">
        <Checkbox>
          <input type="checkbox" bind:checked={task.completed} />
        </Checkbox>
      </label>
      <label slot="trailing">
        <Button
          type="text"
          iconType="full"
          on:click={() => (tasks = tasks.filter((t) => t.id != task.id))}
        >
          <Icon icon={iconDelete} />
        </Button>
      </label>
    </ListItem>
  {/each}
</div>
<TextField
  name="Task name"
  trailingIcon={iconPlus}
  bind:value={newTaskText}
  on:enter={addTask}
  on:trailingClick={addTask}
/>

<style>
  .tasks {
    display: flex;
    flex-direction: column;
    width: 100%;
    flex-grow: 1;
  }
  .box-wrapper {
    display: flex;
    align-items: center;
    justify-content: center;

    width: 1.5rem;
    align-self: stretch;
  }
</style>
```

Here's an example notes app:
```svelte
<script lang="ts">
  import { FAB, Dialog, Button, ListItem, TextFieldMultiline, Snackbar, Card, Icon } from "$lib";
  import iconAdd from "@ktibow/iconset-material-symbols/add";
  import iconDelete from "@ktibow/iconset-material-symbols/delete";
  import iconEdit from "@ktibow/iconset-material-symbols/edit";

  type Note = {
    id: number;
    title: string;
    content: string;
    date: string;
  };

  let notes: Note[] = [];
  let dialog: { open: boolean; editingId?: number; title: string; content: string } = {
    open: false,
    title: "",
    content: "",
  };
  let snackbar: (data: { message: string; closable?: boolean }) => void;

  function addNote() {
    const newNote = {
      id: Date.now(),
      title: dialog.title.trim(),
      content: dialog.content.trim(),
      date: new Date().toLocaleDateString(),
    };

    notes = [newNote, ...notes];
    closeDialog();
  }

  function updateNote() {
    if (!dialog.editingId) return;

    notes = notes.map((note) =>
      note.id == dialog.editingId
        ? { ...note, title: dialog.title.trim(), content: dialog.content.trim() }
        : note,
    );
    closeDialog();
  }

  function deleteNote(id: number) {
    notes = notes.filter((note) => note.id !== id);
    snackbar({ message: "Note deleted", closable: true });
  }

  function openNewNoteDialog() {
    dialog = { open: true, title: "", content: "" };
  }

  function closeDialog() {
    dialog = { open: false, title: "", content: "" };
  }
</script>

<div class="container">
  {#if notes.length}
    {#each notes as note (note.id)}
      <ListItem headline={note.title} supporting={note.content} overline={note.date}>
        <div slot="trailing" class="actions">
          <Button
            type="text"
            iconType="full"
            on:click={() =>
              (dialog = {
                open: true,
                editingId: note.id,
                title: note.title,
                content: note.content,
              })}
          >
            <Icon icon={iconEdit} />
          </Button>
          <Button type="text" iconType="full" on:click={() => deleteNote(note.id)}>
            <Icon icon={iconDelete} />
          </Button>
        </div>
      </ListItem>
    {/each}
  {:else}
    <Card type="outlined">
      <div class="empty-content">
        <p class="m3-font-body-large">No notes yet</p>
        <p class="m3-font-body-medium">Click the + button to create one</p>
      </div>
    </Card>
  {/if}
</div>

<Dialog headline={dialog.editingId ? "New note" : "Edit note"} bind:open={dialog.open}>
  <div class="dialog-content">
    <TextFieldMultiline name="Title" bind:value={dialog.title} />
    <TextFieldMultiline name="Content" bind:value={dialog.content} />
  </div>
  <svelte:fragment slot="buttons">
    <Button type="text" on:click={closeDialog}>Cancel</Button>
    {#if dialog.editingId}
      <Button type="filled" disabled={!dialog.title || !dialog.content} on:click={updateNote}>
        Update
      </Button>
    {:else}
      <Button type="filled" disabled={!dialog.title || !dialog.content} on:click={addNote}>
        Add
      </Button>
    {/if}
  </svelte:fragment>
</Dialog>

<div class="fab">
  <FAB color="primary" icon={iconAdd} on:click={openNewNoteDialog} />
</div>

<Snackbar bind:show={snackbar} />

<style>
  .container {
    display: flex;
    flex-direction: column;
    position: relative;
    width: 100%;
    padding: 1rem;
    overflow-y: auto;
    box-sizing: border-box;
  }

  .empty-content {
    text-align: center;
  }

  .actions {
    display: flex;
    gap: 0.5rem;
  }

  .dialog-content {
    display: flex;
    flex-direction: column;
    gap: 1rem;
  }

  .fab {
    position: fixed;
    bottom: 1rem;
    right: 1rem;
  }
</style>
```

Here's an even more complicated example - a partial clone of the M3 documentation website, using SvelteKit:
```css layout.css
@import url('https://fonts.googleapis.com/css2?family=Roboto:wght@400;500;700&display=swap');
body {
	display: flex;
	height: 100dvh;
	margin: 0;
	box-sizing: border-box;
	background: rgb(var(--m3-scheme-background));
	color: rgb(var(--m3-scheme-on-background));
}
@media (width < 37.5rem) {
	body {
		flex-direction: column-reverse;
		--m3-util-bottom-offset: 5rem;
	}
}
img {
	max-width: 100%;
}
/* not implemented: a comprehensive css reset */
```

```svelte +layout.svelte
<script lang="ts">
	import { NavList, NavListButton, FAB, StyleFromScheme } from 'm3-svelte';
	import iconSearch from '@ktibow/iconset-material-symbols/search';
	import iconHome from '@ktibow/iconset-material-symbols/home';
	import iconApps from '@ktibow/iconset-material-symbols/apps';
	import iconCode from '@ktibow/iconset-material-symbols/code';
	import iconBook from '@ktibow/iconset-material-symbols/book';
	import iconPalette from '@ktibow/iconset-material-symbols/palette';
	import iconExtension from '@ktibow/iconset-material-symbols/extension';
	import iconPages from '@ktibow/iconset-material-symbols/pages';
	import './layout.css';

	// not implemented: using an outlined icon if not selected
	const navItems = [
		{ icon: iconHome, label: 'Home', id: 'home' },
		{ icon: iconApps, label: 'Get started', id: 'get-started' },
		{ icon: iconCode, label: 'Develop', id: 'develop' },
		{ icon: iconBook, label: 'Foundations', id: 'foundations' },
		{ icon: iconPalette, label: 'Styles', id: 'styles' },
		{ icon: iconExtension, label: 'Components', id: 'components' },
		{ icon: iconPages, label: 'Blog', id: 'blog' }
	];
</script>

<!-- [theme snippet] -->
<div class="nav">
	<NavList type="auto">
		<div class="search">
			<FAB icon={iconSearch} />
		</div>
		{#each navItems as item}
  		<!-- not implemented: the ability to click on a destination -->
      <!-- (in that case NavListLink would be better) -->
			<NavListButton type="auto" icon={item.icon} selected={item.id == 'components'}>
				{item.label}
			</NavListButton>
		{/each}
	</NavList>
</div>
<div class="main">
	<slot />
</div>

<style>
	.main {
		padding: 0.5rem;
		overflow-y: auto;
		flex: 1;
	}

	@media (width < 37.5rem) {
		.nav {
			background: rgb(var(--m3-scheme-surface-container));
		}
		.search {
			position: fixed;
			right: 1.5rem;
			bottom: calc(var(--m3-util-bottom-offset) + 1.5rem);
		}
	}

	@media (width >= 37.5rem) {
		.nav {
			width: 5rem;
			height: 100dvh;
		}
		.search {
			align-self: center;
		}
	}
</style>
```

```svelte +page.svelte
<script lang="ts">
	import { Button, Icon } from 'm3-svelte';
	import iconInfo from '@ktibow/iconset-material-symbols/info';
	import iconSpecs from '@ktibow/iconset-material-symbols/rule';
	import iconGuidelines from '@ktibow/iconset-material-symbols/lightbulb';
	import iconAccessibility from '@ktibow/iconset-material-symbols/accessibility';

	let currentTab = 'overview';
	const tabs = [
		{ icon: iconInfo, label: 'Overview', id: 'overview' },
		{ icon: iconSpecs, label: 'Specs', id: 'specs' },
		{ icon: iconGuidelines, label: 'Guidelines', id: 'guidelines' },
		{ icon: iconAccessibility, label: 'Accessibility', id: 'accessibility' }
	];
</script>

<div class="header">
	<div class="info">
		<h1 class="m3-font-display-large">Lists</h1>
		<p class="m3-font-title-large">Lists are continuous, vertical indexes of text and images</p>
	</div>
	<img
		src="https://picsum.photos/id/12/1000/562"
		alt="A list in a recipe app"
		class="preview-image"
	/>
</div>

<div class="tabs">
	{#each tabs as tab}
		<button
			class="m3-font-title-medium"
			disabled={currentTab == tab.id}
			on:click={() => (currentTab = tab.id)}
		>
			<Icon icon={tab.icon} width="1.5rem" height="1.5rem" />
			{tab.label}
		</button>
	{/each}
</div>

<article>
	{Array.from({ length: 200 }, () => 'Lorem ipsum.').join(' ')}
</article>

<style>
	.header {
		display: flex;
		gap: 0.5rem;

		> * {
			border-radius: var(--m3-util-rounding-large);
			min-width: 0;
			flex: 1;
		}
		> .info {
			display: flex;
			flex-direction: column;
			justify-content: center;

			background-color: rgb(var(--m3-scheme-surface-container));
			padding: 2rem;

			> * {
				margin: 0;
			}
		}
	}

	.tabs {
		display: flex;
		flex-direction: column;
		background-color: rgb(var(--m3-scheme-surface-container));
		border-radius: 3rem;
		margin-top: 0.5rem;
		flex-shrink: 0;

		@media (width >= 37.5rem) {
			flex-direction: row;

			> * {
				flex: 1;
			}
		}

		> * {
			display: flex;
			gap: 1rem;
			align-items: center;
			justify-content: center;

			padding: 0;
			border: none;
			height: 6rem;
			border-radius: inherit;
			background-color: inherit;
			color: inherit;
			flex-shrink: 0;

			transition: all 200ms;
			cursor: pointer;

			&:disabled {
				background-color: rgb(var(--m3-scheme-secondary-container));
				color: rgb(var(--m3-scheme-on-surface-container));
			}
		}
	}
</style>
```

## Components

Okay, now on to the components. Again, if you're unsure about how a component works, you can look at its source code in the [m3-svelte repo](https://github.com/KTibow/m3-svelte).

### Button

Minimal demo:
```svelte
<Button type="elevated" on:click={() => alert("!")}>Hello</Button>
```

The M3 Svelte interactive demo for this component uses Button, ButtonLink with the TS `let type: "elevated" | "filled" | "tonal" | "outlined" | "text" = "elevated";
let iconType: "none" | "left" | "full" = "none";
let enabled = true;
let link = false;` to make this demo:
```svelte
<label>
  <Arrows list={["elevated", "filled", "tonal", "outlined", "text"]} bind:value={type} />
  {type[0].toUpperCase() + type.slice(1)}
</label>
<label>
  <Arrows list={["none", "left", "full"]} bind:value={iconType} />
  {iconType == "none" ? "No icon" : iconType == "left" ? "Left icon" : "Icon"}
</label>
<label>
  <Switch bind:checked={enabled} />
  {enabled ? "Enabled" : "Disabled"}
</label>
<label>
  <Switch bind:checked={link} />
  {link ? "Link" : "Button"}
</label>
<div slot="demo">
  <svelte:component this={link ? ButtonLink : Button} {type} disabled={!enabled} {iconType} href="https://example.com">
    {#if iconType == "none"}
      Hello
    {:else if iconType == "left"}
      <Icon icon={iconCircle} /> Hello
    {:else}
      <Icon icon={iconCircle} />
    {/if}
  </svelte:component>
</div>
```

### Segmented Button

Minimal demo:
```svelte
<SegmentedButtonContainer>
  <input type="checkbox" id="segmented-0" bind:checked={itemA} />
  <SegmentedButtonItem input="segmented-0">A</SegmentedButtonItem>
  <input type="checkbox" id="segmented-1" bind:checked={itemB} />
  <SegmentedButtonItem input="segmented-1">B</SegmentedButtonItem>
</SegmentedButtonContainer>
```

The M3 Svelte interactive demo for this component uses SegmentedButtonContainer, SegmentedButtonItem with the TS `let multiselect = false;` to make this demo:
```svelte
<label>
  <Switch bind:checked={multiselect} />
  {multiselect ? "Multi-select" : "Single-select"}
</label>
<div slot="demo">
  {#if multiselect}
    <SegmentedButtonContainer>
      <input type="checkbox" id="segmented-a-0" />
      <SegmentedButtonItem input="segmented-a-0" icon={iconCircle}>A</SegmentedButtonItem>
      <input type="checkbox" id="segmented-a-1" />
      <SegmentedButtonItem input="segmented-a-1" icon={iconSquare}>B</SegmentedButtonItem>
      <input type="checkbox" id="segmented-a-2" disabled />
      <SegmentedButtonItem input="segmented-a-2" icon={iconTriangle}>C</SegmentedButtonItem>
    </SegmentedButtonContainer>
  {:else}
    <SegmentedButtonContainer>
      <input type="radio" name="segmented-b" id="segmented-b-0" checked />
      <SegmentedButtonItem input="segmented-b-0" icon={iconCircle}>A</SegmentedButtonItem>
      <input type="radio" name="segmented-b" id="segmented-b-1" />
      <SegmentedButtonItem input="segmented-b-1" icon={iconSquare}>B</SegmentedButtonItem>
      <input type="radio" name="segmented-b" id="segmented-b-2" disabled />
      <SegmentedButtonItem input="segmented-b-2" icon={iconTriangle}>C</SegmentedButtonItem>
    </SegmentedButtonContainer>
  {/if}
</div>
```

### FAB

Minimal demo:
```svelte
<FAB color="primary" icon={iconCircle} on:click={() => alert("!")} />
```

The M3 Svelte interactive demo for this component uses FAB with the TS `let color: "primary" | "surface" | "secondary" | "tertiary" = "primary";
let size: "small" | "normal" | "large" | "extended" = "normal";` to make this demo:
```svelte
<label>
  <Arrows list={["primary", "surface", "secondary", "tertiary"]} bind:value={color} />
  {color[0].toUpperCase() + color.slice(1)}
</label>
<label>
  <Arrows list={["small", "normal", "large", "extended"]} bind:value={size} index={1} />
  {size[0].toUpperCase() + size.slice(1)}
</label>
<div slot="demo">
  <FAB
    {color}
    size={size == "extended" ? "normal" : size}
    icon={iconCircle}
    text={size == "extended" ? "Hello" : undefined}
  />
</div>
```

### Card

Minimal demo:
```svelte
<Card type="filled">Hello</Card>
<CardClickable type="filled" on:click={() => alert("!")}>Hello</CardClickable>
```

The M3 Svelte interactive demo for this component uses Card, CardClickable with the TS `let type: "elevated" | "filled" | "outlined" = "elevated";
let clickable = false;` to make this demo:
```svelte
<label>
  <Arrows list={["elevated", "filled", "outlined"]} bind:value={type} />
  {type[0].toUpperCase() + type.slice(1)}
</label>
<label>
  <Switch bind:checked={clickable} />
  {clickable ? "Clickable" : "Not clickable"}
</label>
<div slot="demo">
  {#if clickable}
    <CardClickable {type}>Hello</CardClickable>
  {:else}
    <Card {type}>Hello</Card>
  {/if}
</div>
```

### List

Minimal demo:
```svelte
<div>
  <ListItem headline="Hello" />
  <ListItem headline="Hello" />
</div>
```

The M3 Svelte interactive demo for this component uses ListItem, ListItemButton, ListItemLabel, Checkbox, Divider with the TS `let lines: "1" | "2" | "3" = "1";
let type: "div" | "button" | "label" = "div";
const headline = "Hello";
$: supporting =
  lines == "1"
    ? undefined
    : lines == "2"
      ? "Welcome to ZomboCom!"
      : "Welcome to ZomboCom! Anything is possible at ZomboCom! You can do anything at ZomboCom!";` to make this demo:
```svelte
<label>
  <Arrows list={["1", "2", "3"]} bind:value={lines} />
  {lines}
  {lines == "1" ? "line" : "lines"}
</label>
<label>
  <Arrows list={["div", "button", "label"]} bind:value={type} />
  {"<" + type + ">"}
</label>
<div class="demo" slot="demo">
  {#snippet leading()}
    {#if type == "label"}
      <div class="box-wrapper">
        <Checkbox><input type="checkbox" /></Checkbox>
      </div>
    {:else}
      <Icon icon={iconCircle} />
    {/if}
  {/snippet}
  <svelte:component
    this={type == "div" ? ListItem : type == "button" ? ListItemButton : ListItemLabel}
    {headline}
    {supporting}
    lines={+lines}
  >
    <svelte:fragment slot="leading">{@render leading()}</svelte:fragment>
  </svelte:component>
  <Divider />
  <svelte:component
    this={type == "div" ? ListItem : type == "button" ? ListItemButton : ListItemLabel}
    {headline}
    {supporting}
    lines={+lines}
  >
    <svelte:fragment slot="leading">{@render leading()}</svelte:fragment>
  </svelte:component>
</div>

<style>
  .demo {
    display: flex;
    flex-direction: column;
  }
  .box-wrapper {
    display: flex;
    align-items: center;
    justify-content: center;
    flex-shrink: 0;
    width: 1.5rem;
    height: 1.5rem;
  }
</style>
```

### Menu

Minimal demo:
```svelte
<Menu>
  <MenuItem icon={iconCircle}>Undo</MenuItem>
  <MenuItem icon={iconSquare}>Redo</MenuItem>
  <MenuItem icon={iconTriangle}>Cut</MenuItem>
</Menu>
```

The M3 Svelte interactive demo for this component uses Menu, MenuItem with the TS `let icons = false;` to make this demo:
```svelte
<label>
  <Switch bind:checked={icons} />
  {icons ? "Icons" : "No icons"}
</label>
<Menu slot="demo">
  <MenuItem icon={icons ? iconCircle : undefined}>Cut</MenuItem>
  <MenuItem icon={icons ? iconSquare : undefined}>Undo</MenuItem>
  <MenuItem icon={icons ? iconTriangle : undefined} disabled>Redo</MenuItem>
</Menu>
```

### Bottom Sheet

Minimal demo:
```svelte
{#if open}
  <BottomSheet on:close={() => (open = false)}>Hello</BottomSheet>
{/if}
```

The M3 Svelte interactive demo for this component uses Button, BottomSheet with the TS `let open = false;` to make this demo:
```svelte
<div slot="demo">
  <Button type="tonal" on:click={() => (open = true)}>Open</Button>
  {#if open}
    <BottomSheet on:close={() => (open = false)}>Hello</BottomSheet>
  {/if}
</div>
```

### Dialog

Minimal demo:
```svelte
<Dialog headline="Hello" bind:open>
  I'm alive
  <svelte:fragment slot="buttons">
    <Button type="tonal" on:click={() => (open = false)}>OK</Button>
  </svelte:fragment>
</Dialog>
```

The M3 Svelte interactive demo for this component uses Button, Dialog with the TS `let open = false;` to make this demo:
```svelte
<div slot="demo">
  <Button type="tonal" on:click={() => (open = true)}>Open</Button>
  <Dialog icon={iconCircle} headline="Hello" bind:open>
    Anything is possible at ZomboCom! You can do anything at ZomboCom! The infinite is possible at
    ZomboCom! The unattainable is unknown at ZomboCom!
    <svelte:fragment slot="buttons">
      <Button type="tonal" on:click={() => (open = false)}>OK</Button>
    </svelte:fragment>
  </Dialog>
</div>
```

### Snackbar

Minimal demo:
```svelte
<script lang="ts">
  let snackbar: (data: SnackbarIn) => void;
</script>

<Button type="tonal" on:click={() => snackbar({ message: "Hello", closable: true })}>Show</Button>
<Snackbar bind:show={snackbar} />
```

The M3 Svelte interactive demo for this component uses Button, Snackbar, SnackbarAnim with the TS `let animation = true;
let snackbar: (data: SnackbarIn) => void;` to make this demo:
```svelte
<label>
  <Switch bind:checked={animation} />
  {animation ? "#key animated" : "#if animated"}
</label>
<div slot="demo">
  <Button type="tonal" on:click={() => snackbar({ message: "Hello", closable: true })}>Show</Button>
  <svelte:component this={animation ? SnackbarAnim : Snackbar} bind:show={snackbar} />
</div>
```

### Checkbox

Minimal demo:
```svelte
<label>
  <Checkbox>
    <input type="checkbox" bind:checked={on} />
  </Checkbox>
</label>
```

The M3 Svelte interactive demo for this component uses CheckboxAnim, Checkbox with the TS `let animated = true;
let enabled = true;` to make this demo:
```svelte
<label>
  <Switch bind:checked={animated} />
  {animated ? "Animated" : "Not animated"}
</label>
<label>
  <Switch bind:checked={enabled} />
  {enabled ? "Enabled" : "Disabled"}
</label>
<label slot="demo">
  <svelte:component this={animated ? CheckboxAnim : Checkbox}>
    <input type="checkbox" checked disabled={!enabled} />
  </svelte:component>
</label>
```

### Chip

Minimal demo:
```svelte
<Chip type="general" icon={iconCircle} on:click={() => alert("!")}>Hello</Chip>
```

The M3 Svelte interactive demo for this component uses Chip with the TS `let style: "input" | "assist" | "assist elevated" | "general" | "general elevated" = "input";
let iconType: "none" | "left" | "right" = "none";
let enabled = true;
let selected = false;` to make this demo:
```svelte
<label>
  <Arrows
    list={["input", "assist", "assist elevated", "general", "general elevated"]}
    bind:value={style}
  />
  {style[0].toUpperCase() + style.slice(1)}
</label>
<label>
  <Arrows list={["none", "left", "right"]} bind:value={iconType} />
  {iconType == "none" ? "No icon" : iconType == "left" ? "Left icon" : "Right icon"}
</label>
<label>
  <Switch bind:checked={enabled} />
  {enabled ? "Enabled" : "Disabled"}
</label>

<div slot="demo">
  <Chip
    type={style.startsWith("assist") ? "assist" : style.startsWith("general") ? "general" : "input"}
    elevated={style.endsWith("elevated")}
    icon={iconType == "left" ? iconCircle : undefined}
    trailingIcon={iconType == "right" ? iconSquare : undefined}
    disabled={!enabled}
    {selected}
    on:click={() => (selected = !selected)}
  >
    Hello
  </Chip>
</div>
```

### Progress

Minimal demo:
```svelte
<LinearProgress percent={60} />
<LinearProgressIndeterminate />
<CircularProgress percent={60} />
<CircularProgressIndeterminate />
```

The M3 Svelte interactive demo for this component uses LinearProgress, LinearProgressIndeterminate, CircularProgress, CircularProgressIndeterminate with the TS `let type: "linear" | "circular" = "linear";
let indeterminate = false;` to make this demo:
```svelte
<label>
  <Arrows list={["linear", "circular"]} bind:value={type} />
  {type[0].toUpperCase() + type.slice(1)}
</label>
<label>
  <Switch bind:checked={indeterminate} />
  {indeterminate ? "Indeterminate" : "Fixed progress"}
</label>

<div slot="demo">
  {#if type == "linear" && indeterminate}
    <LinearProgressIndeterminate />
  {:else if type == "linear"}
    <LinearProgress percent={60} />
  {:else if type == "circular" && indeterminate}
    <CircularProgressIndeterminate />
  {:else if type == "circular"}
    <CircularProgress percent={60} />
  {/if}
</div>
```

### Radio

Minimal demo:
```svelte
<RadioAnim1><input type="radio" name="stuff" value="one" bind:group={stuff} /></RadioAnim1>
<RadioAnim1><input type="radio" name="stuff" value="two" bind:group={stuff} /></RadioAnim1>
<RadioAnim1><input type="radio" name="stuff" value="three" bind:group={stuff} /></RadioAnim1>
```

The M3 Svelte interactive demo for this component uses RadioAnim1, RadioAnim2, RadioAnim3 with the TS `let animation: "1" | "2" | "3" = "1";
let enabled = true;
$: component = animation == "1" ? RadioAnim1 : animation == "2" ? RadioAnim2 : RadioAnim3;` to make this demo:
```svelte
<label>
  <Arrows list={["1", "2", "3"]} bind:value={animation} />
  Animation {animation}
</label>
<label>
  <Switch bind:checked={enabled} />
  {enabled ? "Enabled" : "Disabled"}
</label>

<div style:display="flex" style:gap="0.5rem" slot="demo">
  <label>
    <svelte:component this={component}>
      <input type="radio" name="radio" checked disabled={!enabled} />
    </svelte:component>
  </label>
  <label>
    <svelte:component this={component}>
      <input type="radio" name="radio" disabled={!enabled} />
    </svelte:component>
  </label>
  <label>
    <svelte:component this={component}>
      <input type="radio" name="radio" disabled={!enabled} />
    </svelte:component>
  </label>
</div>
```

### Slider

Minimal demo:
```svelte
<Slider bind:value={n} />
```

The M3 Svelte interactive demo for this component uses Slider, SliderTicks with the TS `let precision: "continuous" | "discrete" | "discrete-ticks" = "continuous";
let enabled = true;
let value = 0;` to make this demo:
```svelte
<label>
  <Arrows list={["continuous", "discrete", "discrete-ticks"]} bind:value={precision} />
  {precision == "continuous"
    ? "Continuous"
    : precision == "discrete"
      ? "Discrete"
      : "Discrete (ticks)"}
</label>
<label>
  <Switch bind:checked={enabled} />
  {enabled ? "Enabled" : "Disabled"}
</label>

<div slot="demo">
  {#if precision == "discrete-ticks"}
    <SliderTicks step={1} max={6} value={0} disabled={!enabled} />
  {:else}
    <Slider step={precision == "continuous" ? "any" : 10} value={0} disabled={!enabled} />
  {/if}
</div>
```

### Switch

Minimal demo:
```svelte
<label>
  <Switch bind:checked={on} />
</label>
```

The M3 Svelte interactive demo for this component uses Switch with the TS `let enabled = true;` to make this demo:
```svelte
<label>
  <Switch bind:checked={enabled} />
  {enabled ? "Enabled" : "Disabled"}
</label>

<label slot="demo">
  <Switch disabled={!enabled} />
</label>
```

### Text field

Minimal demo:
```svelte
<TextField name="Field" bind:value={text} />
```

The M3 Svelte interactive demo for this component uses TextField, TextFieldOutlined, TextFieldMultiline, TextFieldOutlinedMultiline with the TS `import type { HTMLInputAttributes } from "svelte/elements";
let type: "filled" | "filled_multiline" | "outlined" | "outlined_multiline" = "filled";
let option: "text" | "password" | "number" | "file" = "text";
let leadingIcon = false;
let errored = false;
let enabled = true;
$: extraOptions = { type: option } as HTMLInputAttributes;` to make this demo:
```svelte
<label>
  <Arrows
    list={["filled", "filled_multiline", "outlined", "outlined_multiline"]}
    bind:value={type}
  />
  {type == "filled"
    ? "Filled"
    : type == "filled_multiline"
      ? "Filled multiline"
      : type == "outlined"
        ? "Outlined"
        : "Outlined multiline"}
</label>
<label>
  <Arrows list={["text", "password", "number", "file"]} bind:value={option} />
  {option == "text"
    ? "Text"
    : option == "password"
      ? "Password"
      : option == "number"
        ? "Number"
        : "File"}
</label>
<label>
  <Switch bind:checked={leadingIcon} />
  {leadingIcon ? "Leading icon" : "No leading icon"}
</label>
<label>
  <Switch bind:checked={errored} />
  {errored ? "Errored" : "Not errored"}
</label>
<label>
  <Switch bind:checked={enabled} />
  {enabled ? "Enabled" : "Disabled"}
</label>

<div slot="demo">
  {#if type === "filled"}
    <TextField
      name="Field"
      leadingIcon={leadingIcon ? iconCircle : undefined}
      error={errored}
      disabled={!enabled}
      {extraOptions}
    />
  {:else if type === "outlined"}
    <TextFieldOutlined
      name="Field"
      leadingIcon={leadingIcon ? iconCircle : undefined}
      error={errored}
      disabled={!enabled}
      {extraOptions}
    />
  {:else if type === "filled_multiline"}
    <TextFieldMultiline
      name="Field"
      leadingIcon={leadingIcon ? iconCircle : undefined}
      error={errored}
      disabled={!enabled}
    />
  {:else if type === "outlined_multiline"}
    <TextFieldOutlinedMultiline
      name="Field"
      leadingIcon={leadingIcon ? iconCircle : undefined}
      error={errored}
      disabled={!enabled}
    />
  {/if}
</div>
```

### Tabs

Minimal demo:
```svelte
<Tabs
  items={[
    { name: "A", value: "a" },
    { name: "B", value: "b" },
  ]}
  bind:tab
/>
```

The M3 Svelte interactive demo for this component uses Tabs, VariableTabs with the TS `let type: "primary" | "secondary" = "primary";
let icons = false;
let variable = false;
let tab = "hello";

$: items = icons
  ? [
      { icon: iconCircle, name: "Hello", value: "hello" },
      { icon: iconSquare, name: "World", value: "world" },
      { icon: iconTriangle, name: "The longest item", value: "long" },
    ]
  : [
      { name: "Hello", value: "hello" },
      { name: "World", value: "world" },
      { name: "The longest item", value: "long" },
    ];` to make this demo:
```svelte
<label>
  <Arrows list={["primary", "secondary"]} bind:value={type} />
  {type == "primary" ? "Primary" : "Secondary"}
</label>
<label>
  <Switch bind:checked={icons} />
  {icons ? "Icons" : "No icons"}
</label>
<label>
  <Switch bind:checked={variable} />
  {variable ? "Variable" : "Fixed"}
</label>

<div slot="demo">
  {#if variable}
    <VariableTabs bind:tab secondary={type == "secondary"} {items} />
  {:else}
    <Tabs bind:tab secondary={type == "secondary"} {items} />
  {/if}
</div>
```

### Date field

Minimal demo:
```svelte
<DateField name="Date" bind:date />
```

The M3 Svelte interactive demo for this component uses DateField with the TS `` to make this demo:
```svelte
<DateField name="Date" slot="demo" />
```

## Addendum: more components

### Nav list

This component is a navigation rail and bar at the same time.

Minimal demo:
```svelte
<NavList type="auto">
  <NavListButton type="auto" icon={iconCircle} selected={item == "a"} on:click={() => item = "a"}>
    A
  </NavListButton>
  <NavListButton type="auto" icon={iconSquare} selected={item == "b"} on:click={() => item = "b"}>
    B
  </NavListButton>
</NavList>
```

### Nav drawer

Minimal demo:
```svelte
<NavDrawer>
  <NavDrawerButton icon={iconCircle} selected={item == "a"} on:click={() => item = "a"}>
    A
  </NavDrawerButton>
  <NavDrawerButton icon={iconSquare} selected={item == "b"} on:click={() => item = "b"}>
    B
  </NavDrawerButton>
</NavDrawer>
```
