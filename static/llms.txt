# M3 Svelte

This is M3 Svelte, a Svelte component library that implements the Material 3 design system by @KTibow.

## Getting started

The first step is installation:
```bash
npm i m3-svelte
```

M3 Svelte needs two things to work: a theme and a font. The simplest setup looks like this:
```html (your template)
<head>
  [...]
  <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Roboto:wght@400;500;700&display=swap">
</head>
<body class="m3-font-body-large">
  [...]
</body>
```

```css (somewhere always loaded)
/* The style snippet you copied from https://ktibow.github.io/m3-svelte/theme goes here */

:root {
  /* Any custom styles should go here */
}
```

Aim to keep configuration and boilerplate out of Svelte.

## Building blocks

M3 Svelte is built on a few core concepts:

### CSS Custom Properties: The foundation of theming
```css
--m3-scheme-[color]: [R G B];            /* Color tokens */
--m3-util-elevation-[0-5]: [box shadow]; /* Elevation levels */
--m3-util-rounding-[size]: [size];       /* Border radius sizes */
/*
Colors:
primary, on-primary, primary-container, on-primary-container, inverse-primary, secondary, on-secondary, secondary-container, on-secondary-container, tertiary, on-tertiary, tertiary-container, on-tertiary-container, error, on-error, error-container, on-error-container, background, on-background, surface, on-surface, surface-variant, on-surface-variant, inverse-surface, inverse-on-surface, outline, outline-variant, shadow, scrim, surface-dim, surface-bright, surface-container-lowest, surface-container-low, surface-container, surface-container-high, surface-container-highest, surface-tint
Rounding sizes:
none, extra-small, small, medium, large, extra-large, full
/*
```

### Utility Classes: Common Material styles with the `m3-` prefix
```svelte
<h1 class="m3-font-display-large">Large Title</h1>
<p class="m3-font-body-large">Regular text</p>
<!--
Scale: display, headline, title, body, label
Sizes: large, medium, small
-->
```

### Components: Ready-to-use Material elements
```svelte
<script>
  import { Button } from "m3-svelte";
</script>
<Button variant="filled">Hello</Button>
```

## Tips

M3 Svelte is more and less than the typical component framework.

On one hand, Material 3 consists of guidelines across color, shadow, easing, animation, and spacing, and M3 Svelte is all of that. You don't have to make your own components or animations - you could use components like `Card` and animate them with the `sharedAxisTransition`, eased with `easeEmphasized`.

On the other hand, M3 Svelte doesn't give you a template. There are many things you have to do yourself, like:
- Generating and pasting your theme
- Including your font
- Resetting CSS
- Setting up your own layout (ideally a responsive one)
- Styling your components (if you need something M3 doesn't have)
- Slotting in <input>s
- Rendering icons

If you're ever unsure about something, you might want to check the [m3-svelte repo](https://github.com/KTibow/m3-svelte). The M3 Svelte demo website is built with M3 Svelte and might have implemented what you're trying to do.

## Troubleshooting

You should avoid trying to restyle components. You can't set a `class` and due to Svelte scoped styles, even if you could, it wouldn't work. I repeat, you CANNOT set a `class` on M3 Svelte components. Always look for alternatives, like using `gap` instead of `margin`. If you *must* do this, you would have to do something like `.my-container > :global(.m3-container)`.

You must wrap Checkbox, Radio, and Switch in <label>s.

M3 Svelte uses the Iconify ecosystem. M3 Svelte imports icons from NPM and renders them as SVG. Some components render icons for you:
```svelte
<script>
  import { FAB } from "m3-svelte";
  import iconPlus from "@ktibow/iconset-material-symbols/add";
</script>

<FAB icon={iconPlus} />
```

While in other cases, you render them yourselves:
```svelte
<script>
  import { ListItem, Icon } from "m3-svelte";
  import iconPlus from "@ktibow/iconset-material-symbols/add";
</script>

<ListItem headline="User">
  <Icon icon={iconPlus} slot="leading" />
</ListItem>
```

## Examples

Here's an example todo list component:
```svelte
<script>
  import { TextField, Button, ListItem, Icon, Checkbox } from "$lib";
  import iconPlus from "@ktibow/iconset-material-symbols/add";
  import iconDelete from "@ktibow/iconset-material-symbols/delete";

  let tasks = [
    { id: 1, text: "Learn M3 Svelte", completed: false },
    { id: 2, text: "Build a prototype", completed: false },
    { id: 3, text: "Test components", completed: true },
  ];

  let newTaskText = "";

  function addTask() {
    newTaskText = newTaskText.trim();
    if (!newTaskText) return;

    tasks = [
      ...tasks,
      {
        id: Math.max(...tasks.map((t) => t.id)) + 1,
        text: newTaskText,
        completed: false,
      },
    ];
    newTaskText = "";
  }
</script>

<div class="tasks">
  {#each tasks as task (task.id)}
    <ListItem headline={task.text}>
      <label class="box-wrapper" slot="leading">
        <Checkbox>
          <input type="checkbox" bind:checked={task.completed} />
        </Checkbox>
      </label>
      <label slot="trailing">
        <Button
          variant="text"
          iconType="full"
          onclick={() => (tasks = tasks.filter((t) => t.id != task.id))}
        >
          <Icon icon={iconDelete} />
        </Button>
      </label>
    </ListItem>
  {/each}
</div>
<TextField
  label="Task name"
  trailingIcon={iconPlus}
  bind:value={newTaskText}
  on:enter={addTask}
  on:trailingClick={addTask}
/>

<style>
  .tasks {
    display: flex;
    flex-direction: column;
    width: 100%;
    flex-grow: 1;
  }
  .box-wrapper {
    display: flex;
    align-items: center;
    justify-content: center;

    width: 1.5rem;
    align-self: stretch;
  }
</style>
```

Here's an example notes app:
```svelte
<script lang="ts">
  import { FAB, Dialog, Button, ListItem, TextFieldMultiline, Snackbar, Card, Icon } from "$lib";
  import iconAdd from "@ktibow/iconset-material-symbols/add";
  import iconDelete from "@ktibow/iconset-material-symbols/delete";
  import iconEdit from "@ktibow/iconset-material-symbols/edit";

  type Note = {
    id: number;
    title: string;
    content: string;
    date: string;
  };

  let notes: Note[] = [];
  let dialog: { open: boolean; editingId?: number; title: string; content: string } = {
    open: false,
    title: "",
    content: "",
  };
  let snackbar: (data: { message: string; closable?: boolean }) => void;

  function addNote() {
    const newNote = {
      id: Date.now(),
      title: dialog.title.trim(),
      content: dialog.content.trim(),
      date: new Date().toLocaleDateString(),
    };

    notes = [newNote, ...notes];
    closeDialog();
  }

  function updateNote() {
    if (!dialog.editingId) return;

    notes = notes.map((note) =>
      note.id == dialog.editingId
        ? { ...note, title: dialog.title.trim(), content: dialog.content.trim() }
        : note,
    );
    closeDialog();
  }

  function deleteNote(id: number) {
    notes = notes.filter((note) => note.id !== id);
    snackbar({ message: "Note deleted", closable: true });
  }

  function openNewNoteDialog() {
    dialog = { open: true, title: "", content: "" };
  }

  function closeDialog() {
    dialog = { open: false, title: "", content: "" };
  }
</script>

<div class="container">
  {#if notes.length}
    {#each notes as note (note.id)}
      <ListItem headline={note.title} supporting={note.content} overline={note.date}>
        <div slot="trailing" class="actions">
          <Button
            variant="text"
            iconType="full"
            onclick={() =>
              (dialog = {
                open: true,
                editingId: note.id,
                title: note.title,
                content: note.content,
              })}
          >
            <Icon icon={iconEdit} />
          </Button>
          <Button variant="text" iconType="full" onclick={() => deleteNote(note.id)}>
            <Icon icon={iconDelete} />
          </Button>
        </div>
      </ListItem>
    {/each}
  {:else}
    <Card variant="outlined">
      <div class="empty-content">
        <p class="m3-font-body-large">No notes yet</p>
        <p class="m3-font-body-medium">Click the + button to create one</p>
      </div>
    </Card>
  {/if}
</div>

<Dialog headline={dialog.editingId ? "New note" : "Edit note"} bind:open={dialog.open}>
  <div class="dialog-content">
    <TextFieldMultiline name="Title" bind:value={dialog.title} />
    <TextFieldMultiline name="Content" bind:value={dialog.content} />
  </div>
  <svelte:fragment slot="buttons">
    <Button variant="text" onclick={closeDialog}>Cancel</Button>
    {#if dialog.editingId}
      <Button variant="filled" disabled={!dialog.title || !dialog.content} onclick={updateNote}>
        Update
      </Button>
    {:else}
      <Button variant="filled" disabled={!dialog.title || !dialog.content} onclick={addNote}>
        Add
      </Button>
    {/if}
  </svelte:fragment>
</Dialog>

<div class="fab">
  <FAB color="primary" icon={iconAdd} onclick={openNewNoteDialog} />
</div>

<Snackbar bind:show={snackbar} />

<style>
  .container {
    display: flex;
    flex-direction: column;
    position: relative;
    width: 100%;
    padding: 1rem;
    overflow-y: auto;
    box-sizing: border-box;
  }

  .empty-content {
    text-align: center;
  }

  .actions {
    display: flex;
    gap: 0.5rem;
  }

  .dialog-content {
    display: flex;
    flex-direction: column;
    gap: 1rem;
  }

  .fab {
    position: fixed;
    bottom: 1rem;
    right: 1rem;
  }
</style>
```

Here's an even more complicated example - a partial clone of the M3 documentation website, using SvelteKit:
```css layout.css
@import url('https://fonts.googleapis.com/css2?family=Roboto:wght@400;500;700&display=swap');

/* snip: theme snippet */

body {
  display: flex;
  height: 100dvh;
  margin: 0;
  box-sizing: border-box;
  background: rgb(var(--m3-scheme-background));
  color: rgb(var(--m3-scheme-on-background));
}
@media (width < 52.5rem) {
  body {
    flex-direction: column-reverse;
    --m3-util-bottom-offset: 5rem;
  }
}
img {
  max-width: 100%;
}
/* not implemented: a comprehensive css reset */
```

```svelte +layout.svelte
<script lang="ts">
  import { NavCMLX, NavCMLXItem, FAB } from 'm3-svelte';
  import iconSearch from '@ktibow/iconset-material-symbols/search';
  import iconHome from '@ktibow/iconset-material-symbols/home';
  import iconApps from '@ktibow/iconset-material-symbols/apps';
  import iconCode from '@ktibow/iconset-material-symbols/code';
  import iconBook from '@ktibow/iconset-material-symbols/book';
  import iconPalette from '@ktibow/iconset-material-symbols/palette';
  import iconExtension from '@ktibow/iconset-material-symbols/extension';
  import iconPages from '@ktibow/iconset-material-symbols/pages';
  import './layout.css';

  // not implemented: using an outlined icon if not selected
  const navItems = [
    { icon: iconHome, label: 'Home', id: 'home' },
    { icon: iconApps, label: 'Get started', id: 'get-started' },
    { icon: iconCode, label: 'Develop', id: 'develop' },
    { icon: iconBook, label: 'Foundations', id: 'foundations' },
    { icon: iconPalette, label: 'Styles', id: 'styles' },
    { icon: iconExtension, label: 'Components', id: 'components' },
    { icon: iconPages, label: 'Blog', id: 'blog' }
  ];
</script>

<div class="nav">
  <NavCMLX variant="auto">
    <div class="search">
      <FAB icon={iconSearch} />
    </div>
    {#each navItems as item}
      <!-- not implemented: the ability to click on a destination -->
      <!-- (you would set an `href` and use better `selected` logic then) -->
      <NavCMLXItem variant="auto" icon={item.icon} text={item.label} selected={item.id == 'components'} />
    {/each}
  </NavCMLX>
</div>
<div class="main">
  <slot />
</div>

<style>
  .main {
    padding: 0.5rem;
    overflow-y: auto;
    flex: 1;
  }

  @media (width < 37.5rem) {
    .nav {
      background: rgb(var(--m3-scheme-surface-container));
    }
    .search {
      position: fixed;
      right: 1.5rem;
      bottom: calc(var(--m3-util-bottom-offset) + 1.5rem);
    }
  }

  @media (width >= 37.5rem) {
    .nav {
      width: 5rem;
      height: 100dvh;
    }
    .search {
      align-self: center;
    }
  }
</style>
```

```svelte +page.svelte
<script lang="ts">
  import { Button, Icon } from 'm3-svelte';
  import iconInfo from '@ktibow/iconset-material-symbols/info';
  import iconSpecs from '@ktibow/iconset-material-symbols/rule';
  import iconGuidelines from '@ktibow/iconset-material-symbols/lightbulb';
  import iconAccessibility from '@ktibow/iconset-material-symbols/accessibility';

  let currentTab = 'overview';
  const tabs = [
    { icon: iconInfo, label: 'Overview', id: 'overview' },
    { icon: iconSpecs, label: 'Specs', id: 'specs' },
    { icon: iconGuidelines, label: 'Guidelines', id: 'guidelines' },
    { icon: iconAccessibility, label: 'Accessibility', id: 'accessibility' }
  ];
</script>

<div class="header">
  <div class="info">
    <h1 class="m3-font-display-large">Lists</h1>
    <p class="m3-font-title-large">Lists are continuous, vertical indexes of text and images</p>
  </div>
  <img
    src="https://picsum.photos/id/12/1000/562"
    alt="A list in a recipe app"
    class="preview-image"
  />
</div>

<div class="tabs">
  {#each tabs as tab}
    <button
      class="m3-font-title-medium"
      disabled={currentTab == tab.id}
      onclick={() => (currentTab = tab.id)}
    >
      <Icon icon={tab.icon} width="1.5rem" height="1.5rem" />
      {tab.label}
    </button>
  {/each}
</div>

<article>
  {Array.from({ length: 200 }, () => 'Lorem ipsum.').join(' ')}
</article>

<style>
  .header {
    display: flex;
    gap: 0.5rem;

    > * {
      border-radius: var(--m3-util-rounding-large);
      min-width: 0;
      flex: 1;
    }
    > .info {
      display: flex;
      flex-direction: column;
      justify-content: center;

      background-color: rgb(var(--m3-scheme-surface-container));
      padding: 2rem;

      > * {
        margin: 0;
      }
    }
  }

  .tabs {
    display: flex;
    flex-direction: column;
    background-color: rgb(var(--m3-scheme-surface-container));
    border-radius: 3rem;
    margin-top: 0.5rem;
    flex-shrink: 0;

    @media (width >= 37.5rem) {
      flex-direction: row;

      > * {
        flex: 1;
      }
    }

    > * {
      display: flex;
      gap: 1rem;
      align-items: center;
      justify-content: center;

      padding: 0;
      border: none;
      height: 6rem;
      border-radius: inherit;
      background-color: inherit;
      color: inherit;
      flex-shrink: 0;

      transition: 200ms;
      cursor: pointer;

      &:disabled {
        background-color: rgb(var(--m3-scheme-secondary-container));
        color: rgb(var(--m3-scheme-on-surface-container));
      }
    }
  }
</style>
```

## Components

Okay, now on to the components. Again, if you're unsure about how a component works, you can look at its source code in the [m3-svelte repo](https://github.com/KTibow/m3-svelte).

### Button

Minimal demo:
```svelte
<Button variant="elevated" onclick={() => alert("!")}>Hello</Button>
```

The M3 Svelte interactive demo for this component uses Button with the TS `let variant: "elevated" | "filled" | "tonal" | "outlined" | "text" = $state("elevated");
let action: "click" | "link" | "toggle" = $state("click");
let square = $state(false);
let iconType: "none" | "left" | "full" = $state("none");
let enabled = $state(true);` to make this demo:
```svelte
<label>
  <Arrows list={["elevated", "filled", "tonal", "outlined", "text"]} bind:value={variant} />
  {variant[0].toUpperCase() + variant.slice(1)}
</label>
<label>
  <Arrows list={["click", "link", "toggle"]} bind:value={action} />
  {action[0].toUpperCase() + action.slice(1)}
</label>
<label>
  <Switch bind:checked={square} />
  {square ? "Square" : "Round"}
</label>
<label>
  <Arrows list={["none", "left", "full"]} bind:value={iconType} />
  {iconType == "none" ? "No icon" : iconType == "left" ? "Left icon" : "Icon"}
</label>
<label>
  <Switch bind:checked={enabled} />
  {enabled ? "Enabled" : "Disabled"}
</label>
{#snippet demo()}
  <div>
    <input type="checkbox" id="random-input" disabled={!enabled} />
    <Button
      {variant}
      {square}
      {...{
        click: { onclick: () => {}, disabled: !enabled },
        link: { href: "https://example.com" },
        toggle: { for: "random-input" },
      }[action]}
      {iconType}
    >
      {#if iconType == "none"}
        Hello
      {:else if iconType == "left"}
        <Icon icon={iconCircle} /> Hello
      {:else}
        <Icon icon={iconCircle} />
      {/if}
    </Button>
  </div>
{/snippet}

<style>
  #random-input {
    position: absolute;
    opacity: 0;
    pointer-events: none;
  }
</style>
```

### Connected buttons

Minimal demo:
```svelte
<ConnectedButtons>
  <TogglePrimitive bind:toggle={itemA}>A</TogglePrimitive>
  <TogglePrimitive bind:toggle={itemB}>B</TogglePrimitive>
</ConnectedButtons>
```

The M3 Svelte interactive demo for this component uses ConnectedButtons, Button, TogglePrimitive with the TS `let variant: "filled" | "tonal" = $state("filled");
let multiselect = $state(true);` to make this demo:
```svelte
<label>
  <Arrows list={["filled", "tonal"]} bind:value={variant} />
  {variant[0].toUpperCase() + variant.slice(1)}
</label>
<label>
  <Switch bind:checked={multiselect} />
  {multiselect ? "Multi-select" : "Single-select"}
</label>
{#snippet demo()}
  <ConnectedButtons>
    {#if multiselect}
      <TogglePrimitive toggle={true} {variant}>Alpha</TogglePrimitive>
      <TogglePrimitive toggle={false} {variant}>Beta</TogglePrimitive>
      <TogglePrimitive toggle={false} {variant}>Charlie</TogglePrimitive>
    {:else}
      <input type="radio" name="segmented-b" id="segmented-b-0" checked />
      <Button for="segmented-b-0" {variant} square>Alpha</Button>
      <input type="radio" name="segmented-b" id="segmented-b-1" />
      <Button for="segmented-b-1" {variant} square>Beta</Button>
      <input type="radio" name="segmented-b" id="segmented-b-2" />
      <Button for="segmented-b-2" {variant} square>Charlie</Button>
    {/if}
  </ConnectedButtons>
{/snippet}
```

### Split button

Minimal demo:
```svelte
<SplitButton variant="filled" onclick={() => alert("!")}>
  Hello
  {#snippet menu()}
    and more
  {/snippet}
</SplitButton>
```

The M3 Svelte interactive demo for this component uses SplitButton, Menu, MenuItem with the TS `let variant: "elevated" | "filled" | "tonal" | "outlined" = $state("elevated");
let position: "inner-down" | "inner-up" | "right-down" | "right-up" = $state("inner-down");
let iconType: "none" | "left" | "full" = $state("none");` to make this demo:
```svelte
<label>
  <Arrows list={["elevated", "filled", "tonal", "outlined"]} bind:value={variant} />
  {variant[0].toUpperCase() + variant.slice(1)}
</label>
<label>
  <Arrows list={["inner-down", "inner-up", "right-down", "right-up"]} bind:value={position} />
  {position[0].toUpperCase() + position.slice(1).replace("-", " ")}
</label>
<label>
  <Arrows list={["none", "left", "full"]} bind:value={iconType} />
  {iconType == "none" ? "No icon" : iconType == "left" ? "Left icon" : "Icon"}
</label>

{#snippet demo()}
  <div>
    <SplitButton
      {variant}
      x={position.startsWith("inner") ? "inner" : "right"}
      y={position.endsWith("down") ? "down" : "up"}
      onclick={() => {}}
    >
      {#if iconType == "none"}
        Hello
      {:else if iconType == "left"}
        <Icon icon={iconCircle} /> Hello
      {:else}
        <Icon icon={iconCircle} />
      {/if}
      {#snippet menu()}
        <Menu>
          <MenuItem icon={iconCircle} onclick={() => {}}>Hi</MenuItem>
          <MenuItem icon={iconSquare} onclick={() => {}}>Howdy</MenuItem>
          <MenuItem icon={iconTriangle} onclick={() => {}}>G'day</MenuItem>
        </Menu>
      {/snippet}
    </SplitButton>
  </div>
{/snippet}
```

### FAB

Minimal demo:
```svelte
<FAB color="primary" icon={iconCircle} onclick={() => alert("!")} />
```

The M3 Svelte interactive demo for this component uses FAB with the TS `let color:
  | "primary-container"
  | "secondary-container"
  | "tertiary-container"
  | "primary"
  | "secondary"
  | "tertiary" = $state("primary-container");
let size: "small" | "normal" | "large" | "extended" = $state("normal");` to make this demo:
```svelte
<label>
  <Arrows
    list={[
      "primary-container",
      "secondary-container",
      "tertiary-container",
      "primary",
      "secondary",
      "tertiary",
    ]}
    bind:value={color}
  />
  {color[0].toUpperCase() + color.slice(1).replace("-", " ")}
</label>
<label>
  <Arrows list={["small", "normal", "large", "extended"]} bind:value={size} initialIndex={1} />
  {size[0].toUpperCase() + size.slice(1)}
</label>
{#snippet demo()}
  <div>
    <FAB
      {color}
      onclick={() => {}}
      {...size == "extended" ? { size: "normal", text: "Hello" } : { size }}
      icon={iconCircle}
    />
  </div>
{/snippet}
```

### Card

Minimal demo:
```svelte
<Card variant="filled">Hello</Card>
<Card variant="filled" onclick={() => alert("!")}>Hello</Card>
```

The M3 Svelte interactive demo for this component uses Card with the TS `let variant: "elevated" | "filled" | "outlined" = $state("elevated");
let clickable = $state(false);` to make this demo:
```svelte
<label>
  <Arrows list={["elevated", "filled", "outlined"]} bind:value={variant} />
  {variant[0].toUpperCase() + variant.slice(1)}
</label>
<label>
  <Switch bind:checked={clickable} />
  {clickable ? "Clickable" : "Not clickable"}
</label>
{#snippet demo()}
  <Card {variant} {...clickable ? { onclick: () => {} } : {}}>Hello</Card>
{/snippet}
```

### List

Minimal demo:
```svelte
<div>
  <ListItem headline="Hello" />
  <ListItem headline="Hello" />
</div>
```

The M3 Svelte interactive demo for this component uses ListItem, Checkbox, Divider with the TS `const headline = "Hello";

let lines: "1" | "2" | "3" = $state("1");
let type: "div" | "button" | "label" | "a" = $state("div");

let supporting = $derived(
  lines == "1"
    ? undefined
    : lines == "2"
      ? "Welcome to ZomboCom!"
      : "Welcome to ZomboCom! Anything is possible at ZomboCom! You can do anything at ZomboCom!",
);` to make this demo:
```svelte
<label>
  <Arrows list={["1", "2", "3"]} bind:value={lines} />
  {lines}
  {lines == "1" ? "line" : "lines"}
</label>
<label>
  <Arrows list={["div", "button", "label", "a"]} bind:value={type} />
  {"<" + type + ">"}
</label>
{#snippet demo()}
  <div class="demo">
    {#snippet leading()}
      {#if type == "label"}
        <div class="box-wrapper">
          <Checkbox><input type="checkbox" /></Checkbox>
        </div>
      {:else}
        <Icon icon={iconCircle} />
      {/if}
    {/snippet}
    <ListItem
      {leading}
      {headline}
      {supporting}
      lines={+lines}
      {...type == "label"
        ? { label: true }
        : type == "button"
          ? { onclick: () => {} }
          : type == "a"
            ? { href: "https://example.com" }
            : {}}
    />
    <Divider />
    <ListItem
      {leading}
      {headline}
      {supporting}
      lines={+lines}
      {...type == "label"
        ? { label: true }
        : type == "button"
          ? { onclick: () => {} }
          : type == "a"
            ? { href: "https://example.com" }
            : {}}
    />
  </div>
{/snippet}

<style>
  .demo {
    display: flex;
    flex-direction: column;
  }
  .box-wrapper {
    display: flex;
    align-items: center;
    justify-content: center;
    flex-shrink: 0;
    width: 1.5rem;
    height: 1.5rem;
  }
</style>
```

### Menu

Minimal demo:
```svelte
<Menu>
  <MenuItem icon={iconCircle}>Undo</MenuItem>
  <MenuItem icon={iconSquare}>Redo</MenuItem>
  <MenuItem icon={iconTriangle}>Cut</MenuItem>
</Menu>
```

The M3 Svelte interactive demo for this component uses Menu, MenuItem with the TS `let icons = $state(false);` to make this demo:
```svelte
<label>
  <Switch bind:checked={icons} />
  {icons ? "Icons" : "No icons"}
</label>
{#snippet demo()}
  <Menu>
    <MenuItem icon={icons ? iconCircle : undefined} onclick={() => {}}>Cut</MenuItem>
    <MenuItem icon={icons ? iconSquare : undefined} onclick={() => {}}>Undo</MenuItem>
    <MenuItem icon={icons ? iconTriangle : undefined} disabled onclick={() => {}}>Redo</MenuItem>
  </Menu>
{/snippet}
```

### Bottom sheet

Minimal demo:
```svelte
{#if open}
  <BottomSheet close={() => (open = false)}>Hello</BottomSheet>
{/if}
```

The M3 Svelte interactive demo for this component uses Button, BottomSheet with the TS `let open = $state(false);` to make this demo:
```svelte
{#snippet demo()}
  <Button variant="tonal" onclick={() => (open = true)}>Open</Button>
  {#if open}
    <BottomSheet close={() => (open = false)}>
      {"Anything is possible at ZomboCom! You can do anything at ZomboCom! The infinite is possible at ZomboCom! The unattainable is unknown at ZomboCom! ".repeat(
        20,
      )}
    </BottomSheet>
  {/if}
{/snippet}
```

### Dialog

Minimal demo:
```svelte
<Dialog headline="Hello" bind:open>
  I'm alive
  {#snippet buttons()}
    <Button variant="tonal" onclick={() => (open = false)}>OK</Button>
  {/snippet}
</Dialog>
```

The M3 Svelte interactive demo for this component uses Button, Dialog with the TS `let open = $state(false);` to make this demo:
```svelte
{#snippet demo()}
  <Button variant="tonal" onclick={() => (open = true)}>Open</Button>
  <Dialog icon={iconCircle} headline="Hello" bind:open>
    Anything is possible at ZomboCom! You can do anything at ZomboCom! The infinite is possible at
    ZomboCom! The unattainable is unknown at ZomboCom!
    {#snippet buttons()}
      <Button variant="tonal" onclick={() => (open = false)}>OK</Button>
    {/snippet}
  </Dialog>
{/snippet}
```

### Snackbar

Minimal demo:
```svelte
<script lang="ts">
  let snackbar: ReturnType<typeof Snackbar>;
</script>

<Button variant="tonal" onclick={() => snackbar.show({ message: "Hello", closable: true })}>
  Show
</Button>
<Snackbar bind:this={snackbar} />
```

The M3 Svelte interactive demo for this component uses Button, Snackbar with the TS `let snackbar: ReturnType<typeof Snackbar>;` to make this demo:
```svelte
{#snippet demo()}
  <Button variant="tonal" onclick={() => snackbar.show({ message: "Hello", closable: true })}>
    Show
  </Button>
  <Snackbar bind:this={snackbar} />
{/snippet}
```

### Checkbox

Minimal demo:
```svelte
<label>
  <Checkbox>
    <input type="checkbox" bind:checked={on} />
  </Checkbox>
</label>
```

The M3 Svelte interactive demo for this component uses Checkbox with the TS `let enabled = $state(true);` to make this demo:
```svelte
<label>
  <Switch bind:checked={enabled} />
  {enabled ? "Enabled" : "Disabled"}
</label>
{#snippet demo()}
  <label>
    <Checkbox>
      <input type="checkbox" checked disabled={!enabled} />
    </Checkbox>
  </label>
{/snippet}
```

### Chip

Minimal demo:
```svelte
<Chip variant="general" icon={iconCircle} onclick={() => alert("!")}>Hello</Chip>
```

The M3 Svelte interactive demo for this component uses Chip with the TS `let style: "input" | "assist" | "assist elevated" | "general" | "general elevated" =
  $state("input");
let iconType: "none" | "left" | "right" = $state("none");
let enabled = $state(true);
let selected = $state(false);` to make this demo:
```svelte
<label>
  <Arrows
    list={["input", "assist", "assist elevated", "general", "general elevated"]}
    bind:value={style}
  />
  {style[0].toUpperCase() + style.slice(1)}
</label>
<label>
  <Arrows list={["none", "left", "right"]} bind:value={iconType} />
  {iconType == "none" ? "No icon" : iconType == "left" ? "Left icon" : "Right icon"}
</label>
<label>
  <Switch bind:checked={enabled} />
  {enabled ? "Enabled" : "Disabled"}
</label>

{#snippet demo()}
  <div>
    <Chip
      variant={style.startsWith("assist")
        ? "assist"
        : style.startsWith("general")
          ? "general"
          : "input"}
      elevated={style.endsWith("elevated")}
      icon={iconType == "left" ? iconCircle : undefined}
      trailingIcon={iconType == "right" ? iconSquare : undefined}
      disabled={!enabled}
      {selected}
      onclick={() => (selected = !selected)}
    >
      Hello
    </Chip>
  </div>
{/snippet}
```

### Progress

Minimal demo:
```svelte
<LinearProgress percent={60} />
<LinearProgressEstimate sToHalfway={2} />
<WavyLinearProgress percent={60} />
<WavyLinearProgressEstimate sToHalfway={2} />
<CircularProgress percent={60} />
<CircularProgressEstimate sToHalfway={2} />
```

The M3 Svelte interactive demo for this component uses LinearProgress, LinearProgressEstimate, WavyLinearProgress, WavyLinearProgressEstimate, CircularProgress, CircularProgressEstimate, Button, Slider with the TS `let type: "linear" | "linear-wavy" | "circular" = $state("linear");
let estimate = $state(false);
let thick = $state(false);
let percent = $state(10);` to make this demo:
```svelte
<label>
  <Arrows list={["linear", "linear-wavy", "circular"]} bind:value={type} />
  {type[0].toUpperCase() + type.slice(1).replace("-", " ")}
</label>
<label>
  <Switch bind:checked={thick} />
  {thick ? "Thicker" : "Default"}
</label>
{#if !estimate}
  <Slider bind:value={percent} />
{/if}
<input type="checkbox" id="estimate-toggle" bind:checked={estimate} />
<Button variant="tonal" for="estimate-toggle">{estimate ? "Estimated" : "Estimate"}</Button>

{#snippet demo()}
  {#if estimate && type == "linear"}
    <LinearProgressEstimate sToHalfway={2} height={thick ? 8 : 4} />
  {:else if estimate && type == "linear-wavy"}
    <WavyLinearProgressEstimate height={thick ? 14 : 10} thickness={thick ? 8 : 4} />
  {:else if estimate && type == "circular"}
    <CircularProgressEstimate sToHalfway={2} thickness={thick ? 8 : 4} />
  {:else if type == "linear"}
    <LinearProgress {percent} height={thick ? 8 : 4} />
  {:else if type == "linear-wavy"}
    <WavyLinearProgress {percent} height={thick ? 14 : 10} thickness={thick ? 8 : 4} />
  {:else if type == "circular"}
    <CircularProgress {percent} thickness={thick ? 8 : 4} />
  {/if}
{/snippet}

<style>
  #estimate-toggle {
    display: none;
  }
</style>
```

### Loading

Minimal demo:
```svelte
<LoadingIndicator />
```

The M3 Svelte interactive demo for this component uses LoadingIndicator with the TS `let container = $state(false);` to make this demo:
```svelte
<label>
  <Switch bind:checked={container} />
  {container ? "Contained" : "Raw"}
</label>

{#snippet demo()}
  <LoadingIndicator {container} />
{/snippet}
```

### Radio

Minimal demo:
```svelte
<RadioAnim1><input type="radio" name="stuff" value="one" bind:group={stuff} /></RadioAnim1>
<RadioAnim1><input type="radio" name="stuff" value="two" bind:group={stuff} /></RadioAnim1>
<RadioAnim1><input type="radio" name="stuff" value="three" bind:group={stuff} /></RadioAnim1>
```

The M3 Svelte interactive demo for this component uses RadioAnim1, RadioAnim2, RadioAnim3 with the TS `let animation: "1" | "2" | "3" = $state("1");
let enabled = $state(true);

let Component = $derived(
  animation == "1" ? RadioAnim1 : animation == "2" ? RadioAnim2 : RadioAnim3,
);` to make this demo:
```svelte
<label>
  <Arrows list={["1", "2", "3"]} bind:value={animation} />
  Animation {animation}
</label>
<label>
  <Switch bind:checked={enabled} />
  {enabled ? "Enabled" : "Disabled"}
</label>

{#snippet demo()}
  <div style:display="flex" style:gap="0.5rem">
    <label>
      <Component>
        <input type="radio" name="radio" checked disabled={!enabled} />
      </Component>
    </label>
    <label>
      <Component>
        <input type="radio" name="radio" disabled={!enabled} />
      </Component>
    </label>
    <label>
      <Component>
        <input type="radio" name="radio" disabled={!enabled} />
      </Component>
    </label>
  </div>
{/snippet}
```

### Slider

Minimal demo:
```svelte
<Slider bind:value={n} />
```

The M3 Svelte interactive demo for this component uses Slider with the TS `let precision = $state<"continuous" | "discrete" | "discrete-ticks">("continuous");
let size = $state<"xs" | "s" | "m" | "l" | "xl">("xs");
let trailingIcon = $state<boolean>(false);
let leadingIcon = $state<boolean>(false);
let endStops = $state<boolean>(true);
let enabled = $state<boolean>(true);` to make this demo:
```svelte
<label>
  <Arrows list={["continuous", "discrete", "discrete-ticks"]} bind:value={precision} />
  {precision == "continuous"
    ? "Continuous"
    : precision == "discrete"
      ? "Discrete"
      : "Discrete (ticks)"}
</label>
<label>
  <Arrows list={["xs", "s", "m", "l", "xl"]} bind:value={size} />
  {size == "xs"
    ? "Extra Small"
    : size == "s"
      ? "Small"
      : size == "m"
        ? "Medium"
        : size == "l"
          ? "Large"
          : "Extra Large"}
</label>
<label>
  <Switch bind:checked={enabled} />
  {enabled ? "Enabled" : "Disabled"}
</label>
{#if size != "xs" && size != "s"}
  <label>
    <Switch bind:checked={leadingIcon} />
    {leadingIcon ? "Leading icon" : "No leading icon"}
  </label>
  <label>
    <Switch bind:checked={trailingIcon} />
    {trailingIcon ? "Trailing icon" : "No trailing icon"}
  </label>
{/if}
{#if precision != "discrete-ticks" && !trailingIcon}
  <label>
    <Switch bind:checked={endStops} />
    {endStops ? "Endstops" : "No Endstops"}
  </label>
{/if}

{#snippet demo()}
  <Slider
    step={precision == "continuous" ? "any" : 10}
    value={10}
    disabled={!enabled}
    ticks={precision == "discrete-ticks"}
    {size}
    {endStops}
    leadingIcon={leadingIcon ? iconCircle : undefined}
    trailingIcon={trailingIcon ? iconSquare : undefined}
  />
{/snippet}
```

### Switch

Minimal demo:
```svelte
<label>
  <Switch bind:checked={on} />
</label>
```

The M3 Svelte interactive demo for this component uses Switch with the TS `let enabled = $state(true);` to make this demo:
```svelte
<label>
  <Switch bind:checked={enabled} />
  {enabled ? "Enabled" : "Disabled"}
</label>

{#snippet demo()}
  <label>
    <Switch disabled={!enabled} />
  </label>
{/snippet}
```

### Text field

Minimal demo:
```svelte
<TextField label="Field" bind:value={text} />
```

The M3 Svelte interactive demo for this component uses TextField, TextFieldOutlined, TextFieldMultiline, TextFieldOutlinedMultiline with the TS `import type { HTMLInputAttributes } from "svelte/elements";
let type: "filled" | "filled_multiline" | "outlined" | "outlined_multiline" = $state("filled");
let option: "text" | "password" | "number" | "file" = $state("text");
let leadingIcon = $state(false);
let trailingIcon = $state(false);
let errored = $state(false);
let enabled = $state(true);` to make this demo:
```svelte
<label>
  <Arrows
    list={["filled", "filled_multiline", "outlined", "outlined_multiline"]}
    bind:value={type}
  />
  {type == "filled"
    ? "Filled"
    : type == "filled_multiline"
      ? "Filled multiline"
      : type == "outlined"
        ? "Outlined"
        : "Outlined multiline"}
</label>
<label>
  <Arrows list={["text", "password", "number", "file"]} bind:value={option} />
  {option == "text"
    ? "Text"
    : option == "password"
      ? "Password"
      : option == "number"
        ? "Number"
        : "File"}
</label>
<label>
  <Switch bind:checked={leadingIcon} />
  {leadingIcon ? "Leading icon" : "No leading icon"}
</label>
<label>
  <Switch bind:checked={trailingIcon} />
  {trailingIcon ? "Trailing icon" : "No trailing icon"}
</label>
<label>
  <Switch bind:checked={errored} />
  {errored ? "Errored" : "Not errored"}
</label>
<label>
  <Switch bind:checked={enabled} />
  {enabled ? "Enabled" : "Disabled"}
</label>

{#snippet demo()}
  {#if type === "filled"}
    <TextField
      label="Field"
      leadingIcon={leadingIcon ? iconCircle : undefined}
      trailing={trailingIcon ? { icon: iconSquare, onclick: () => {} } : undefined}
      error={errored}
      disabled={!enabled}
      type={option}
    />
  {:else if type === "outlined"}
    <TextFieldOutlined
      label="Field"
      leadingIcon={leadingIcon ? iconCircle : undefined}
      trailing={trailingIcon ? { icon: iconSquare, onclick: () => {} } : undefined}
      error={errored}
      disabled={!enabled}
      type={option}
    />
  {:else if type === "filled_multiline"}
    <TextFieldMultiline
      label="Field"
      leadingIcon={leadingIcon ? iconCircle : undefined}
      error={errored}
      disabled={!enabled}
    />
  {:else if type === "outlined_multiline"}
    <TextFieldOutlinedMultiline
      label="Field"
      leadingIcon={leadingIcon ? iconCircle : undefined}
      error={errored}
      disabled={!enabled}
    />
  {/if}
{/snippet}
```

### Tabs

Minimal demo:
```svelte
<Tabs
  items={[
    { name: "A", value: "a" },
    { name: "B", value: "b" },
  ]}
  bind:tab
/>
```

The M3 Svelte interactive demo for this component uses Tabs, VariableTabs with the TS `let type: "primary" | "secondary" = $state("primary");
let icons = $state(false);
let variable = $state(false);
let tab = $state("hello");

let items = $derived(
  icons
    ? [
        { icon: iconCircle, name: "Hello", value: "hello" },
        { icon: iconSquare, name: "World", value: "world" },
        { icon: iconTriangle, name: "The longest item", value: "long" },
      ]
    : [
        { name: "Hello", value: "hello" },
        { name: "World", value: "world" },
        { name: "The longest item", value: "long" },
      ],
);` to make this demo:
```svelte
<label>
  <Arrows list={["primary", "secondary"]} bind:value={type} />
  {type == "primary" ? "Primary" : "Secondary"}
</label>
<label>
  <Switch bind:checked={icons} />
  {icons ? "Icons" : "No icons"}
</label>
<label>
  <Switch bind:checked={variable} />
  {variable ? "Variable" : "Fixed"}
</label>

{#snippet demo()}
  {#if variable}
    <VariableTabs bind:tab secondary={type == "secondary"} {items} />
  {:else}
    <Tabs bind:tab secondary={type == "secondary"} {items} />
  {/if}
{/snippet}
```

### Date field

Minimal demo:
```svelte
<DateField label="Date" bind:value />
<DateFieldOutlined label="Date" bind:value />
```

The M3 Svelte interactive demo for this component uses DateField, DateFieldOutlined with the TS `let variant: "filled" | "outlined" = $state("filled");
let enabled = $state(true);
let errored = $state(false);` to make this demo:
```svelte
<label>
  <Arrows list={["filled", "outlined"]} bind:value={variant} />
  {variant[0].toUpperCase() + variant.slice(1)}
</label>
<label>
  <Switch bind:checked={errored} />
  {errored ? "Errored" : "Not errored"}
</label>
<label>
  <Switch bind:checked={enabled} />
  {enabled ? "Enabled" : "Disabled"}
</label>

{#snippet demo()}
  {#if variant === "filled"}
    <DateField label="Date" disabled={!enabled} error={errored} />
  {:else}
    <DateFieldOutlined label="Date" disabled={!enabled} error={errored} />
  {/if}
{/snippet}
```

## Addendum: more components

### Nav CMLX

This component works across all 4 breakpoints: compact, small, large, and expanded. Compact is equivalent to the old navigation bar (items vertical but arranged horizontally), Small is new (items horizontal and arranged horizontally), Large is equivalent to the old navigation rail (items vertical and arranged vertically), and Expanded is equivalent to the old navigation drawer (items horizontal but arranged vertically). It can take a `click` if it's a button or an `href` if it's a link.

Minimal demo:
```svelte
<NavCMLX variant="auto">
  <NavCMLXItem variant="auto" icon={iconCircle} text="A" selected={item == "a"} click={() => item = "a"} />
  <NavCMLXItem variant="auto" icon={iconSquare} text="B" selected={item == "b"} click={() => item = "b"} />
</NavCMLX>
```
